# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '44 18 * * 3'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Add any setup steps before running the `github/codeql-action/init` action.
    # This includes steps like installing compilers or runtimes (`actions/setup-node`
    # or others). This is typically only required for manual builds.
    # - name: Setup runtime (example)
    #   uses: actions/setup-example@v1

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
 {
"name": "My PWA App",
"short_name": "PWAApp",
"start_url": "/",
"display": "standalone",
"background_color": "#ffffff",
"theme_color": "#2196f3",
"description": "A simple Progressive Web App<link rel="manifest" href="/manifest.json" />
<meta name="theme-color" content="#2196f3" /> example.",
"icons": [
{
"src": "/icon-192.png",
"sizes": "192x192",
"type": "image/png"
},
{
"src": "/icon-512.png",
"sizes": "512x512",
"type": "image/png"
}
]
}<script>
if ('serviceWorker' in navigator) {
window.addEventListener('load', function () {
navigator.serviceWorker.register('/service-worker.js')
.then(reg => console.log('Service Worker registered:', reg))
.catch(err => console.error('Service Worker registration failed:', err));
});
}
</script><!DOCTYPE html>

<html lang="en">    
<head>    
  <meta charset="UTF-8" />    
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />    
  <meta name="theme-color" content="#2196f3" />    
  <link rel="manifest" href="/manifest.json" />    
  <title>My PWA App</title>    
</head>    
<body>    
  <h1>Hello PWA!</h1>    
  <p>This is a simple Progressive Web App.</p>      <script>    
    if ('serviceWorker' in navigator) {    
      window.addEventListener('load', function () {    
        navigator.serviceWorker.register('/service-worker.js')    
          .then(reg => console.log('Service Worker registered:', reg))    
          .catch(err => console.error('Service Worker registration failed:', err));    
      });    
    }    
  </script>    </body>    
</html>{    
  "name": "My PWA App",    
  "short_name": "PWAApp",    
  "start_url": "/",    
  "display": "standalone",    
  "background_color": "#ffffff",    
  "theme_color": "#2196f3",    
  "description": "A simple Progressive Web App example.",    
  "icons": [    
    {    
      "src": "/icon-192.png",    
      "sizes": "192x192",    
      "type": "image/png"    
    },    
    {    
      "src": "/icon-512.png",    
      "sizes": "512x512",    
      "type": "image/png"    
    }    
  ]    
}const CACHE_NAME = 'pwa-cache-v1';    
const urlsToCache = ['/', '/index.html'];    self.addEventListener('install', event => {
event.waitUntil(
caches.open(CACHE_NAME).then(cache => cache.addAll(urlsToCache))
);
});

self.addEventListener('fetch', event => {
event.respondWith(
caches.match(event.request).then(response => response || fetch(event.request))
);
});<!DOCTYPE html>

<html lang="en">    
<head>    
  <meta charset="UTF-8" />    
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />    
  <meta name="theme-color" content="#121212" />    
  <link rel="manifest" href="/manifest.json" />    
  <link rel="stylesheet" href="styles.css" />    
  <title>My PWA App</title>    
</head>    
<body>    
  <div class="container">    
    <h1>Hello PWA!</h1>    
    <p>This is a dark-themed Progressive Web App.</p>    
  </div>      <script>    
    if ('serviceWorker' in navigator) {    
      window.addEventListener('load', function () {    
        navigator.serviceWorker.register('/service-worker.js')    
          .then(reg => console.log('Service Worker registered:', reg))    
          .catch(err => console.error('Service Worker registration failed:', err));    
      });    
    }    
  </script>    </body>    
</html>body {    
  margin: 0;    
  padding: 0;    
  background-color: #121212;    
  color: #ffffff;    
  font-family: 'Arial', sans-serif;    
  display: flex;    
  align-items: center;    
  justify-content: center;    
  height: 100vh;    
}    .container {
text-align: center;
}

h1 {
font-size: 2.5rem;
margin-bottom: 10px;
}

p {
font-size: 1.2rem;
}{
"name": "My PWA App",
"short_name": "PWAApp",
"start_url": "/",
"display": "standalone",
"background_color": "#121212",
"theme_color": "#121212",
"description": "A dark-themed Progressive Web App.",
"icons": [
{
"src": "/icon-192.png",
"sizes": "192x192",
"type": "image/png"
},
{
"src": "/icon-512.png",
"sizes": "512x512",
"type": "image/png"
}
]
}const CACHE_NAME = 'pwa-cache-v1';
const urlsToCache = ['/', '/index.html', '/styles.css'];

self.addEventListener('install', event => {
event.waitUntil(
caches.open(CACHE_NAME).then(cache => cache.addAll(urlsToCache))
);
});

self.addEventListener('fetch', event => {
event.respondWith(
caches.match(event.request).then(response => response || fetch(event.request))
);
});üìÅ your project folder/
‚îú‚îÄ index.html
‚îú‚îÄ styles.css
‚îú‚îÄ manifest.json
‚îú‚îÄ service-worker.js
‚îú‚îÄ icon-192.png
‚îî‚îÄ icon-512.png

       # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
